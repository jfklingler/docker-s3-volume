#!/bin/bash

[[ "$TRACE" ]] && set -x

function usage {
	cat <<-EOF
	Usage: $PROGNAME [OPTIONS] <local-path> <remote-path> [-- <sync-options>]
	Sync s3 directory locally and backup changed files on exit

	  -f, --force-restore           restore even if local directory is not empty
	  -h, --help                    display this message
	  -o <owner>, --owner <owner>   change ownership of restored files to <owner>

	   eg: $PROGNAME /data s3://bucket/dir -o user:group -f -- --delete --exclude /useless_file
	EOF
}

function error_exit {
	echo "${1:-"Unknown Error"}" 1>&2
	exit 1
}

PARSED_OPTIONS=$(getopt -n "$0" -o fho: --long force-restore,help,owner: -- "$@")
if [ $? -ne 0 ];
then
  usage
  exit 1
fi
eval set -- "$PARSED_OPTIONS"

while true;
do
  case "$1" in
		-f|--force-restore)
      FORCE_RESTORE="true"
      shift;;

    -h|--help)
      usage
      exit 0
      shift;;

    -o|--owner)
      CHOWN=$2
      shift 2;;

    --)
      shift
      SYNC_OPTIONS=$@
      break;;
  esac
done

PROGNAME=$0
LOCAL=$1
REMOTE=$2

echo Maintaining sync from $LOCAL to $REMOTE with options: $SYNC_OPTIONS
if [[ "$CHOWN" ]]; then
  echo Setting ownership of synced files to $CHOWN
fi

if [[ ! "$LOCAL" || ! "$REMOTE" ]]; then
  echo "You need to specify a local directory and remote S3 location"
  usage
  exit 1
fi

function restore {
  if [ "$(ls -A $LOCAL)" ]; then
		if [[ ${FORCE_RESTORE:false} == 'true' ]]; then
    	error_exit "local directory is not empty"
		fi
  fi

  force_restore
}

function force_restore {
  echo "restoring $REMOTE => $LOCAL"
  if ! aws s3 sync "$REMOTE" "$LOCAL" $SYNC_OPTIONS; then
    error_exit "restore failed"
  else
    if [[ "$CHOWN" ]]; then
      chown -R $CHOWN $LOCAL
    fi
  fi
}

function backup {
  echo "backup $LOCAL => $REMOTE"
  if ! aws s3 sync "$LOCAL" "$REMOTE" $SYNC_OPTIONS; then
    echo "backup failed" 1>&2
    return 1
  fi
}

function final_backup {
  echo "backup $LOCAL => $REMOTE"
  while ! aws s3 sync "$LOCAL" "$REMOTE" $SYNC_OPTIONS; do
    echo "backup failed" 1>&2
    sleep 1
  done
  exit 0
}

function idle {
  echo "ready"
  while true; do
    sleep 42 &
    wait $!
  done
}

restore

trap final_backup SIGHUP SIGINT SIGTERM
trap "backup; idle" USR1
trap "force_restore; idle" USR2

idle
